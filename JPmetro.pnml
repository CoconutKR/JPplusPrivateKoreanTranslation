//Welcome to the example header!
grf {
    /* This grf is part of NML, therefore "NML" is chosen as the front three
     * characters of the GRFID. It is the front real grf defined as part of
     * NML, therefore the end character is set to 0. Successive grfs will
     * have 1, 2, etc. there, to make sure each example grf has a unique GRFID.
     */
    grfid: "YZ\AA\01";
    /* GRF name and description strings are defined in the lang files */
    name: string(STR_NAME);
    desc: string(STR_DESC);
    /* This is the front version, start numbering at 0. */
    version: 2;
    min_compatible_version: 0;


param 0 {
				//basecosts
		param_buy {
				type: int;
				name: string(STR_PARAM_NAME_BASECOSTMODBUY);
				desc: string(STR_PARAM_DESC_BASECOSTMODBUY);
				min_value: 0;
				max_value: 2;
				def_value: 1;
				names: {
								0: string(STR_PARAM_LOW);
								1: string(STR_PARAM_NORMAL);
								2: string(STR_PARAM_HIGH);
						};
				}
		}

		//runningcosts

param {
		param_run {
			type: int;
			name: string(STR_PARAM_RUN_NAME);
			desc: string(STR_PARAM_RUN_DESC);
			min_value: 0;
			max_value: 2;
			def_value: 1;
			names: {
				0: string(STR_PARAM_LOW);
				1: string(STR_PARAM_NORMAL);
				2: string(STR_PARAM_HIGH);

			};
		}
	}
param {
				param_capacities {
						type: int;
						name: string(STR_PARAM_NAME_CAPACITY);
						desc: string(STR_PARAM_DESC_CAPACITY);
						min_value: 0;
						max_value: 2;
						def_value: 2;
						names: {
												0: string(STR_PARAM_LOW_CAPACITY);
												1: string(STR_PARAM_NORMAL_CAPACITY);
												2: string(STR_PARAM_HIGH_CAPACITY);
						};
				}
		}     

}

if (param_capacities == 0) {
	param_capacities_1 = 50; // old car //
	param_capacities_2 = 65; // 16m car //
	param_capacities_3 = 75; // normal car //
	param_capacities_4 = 30; // express car //
}

if (param_capacities == 1) {
	param_capacities_1 = 60; // old car //
	param_capacities_2 = 75; // 16m car //
	param_capacities_3 = 90; // normal car //
	param_capacities_4 = 40; // express car //
}

if (param_capacities == 2) {
	param_capacities_1 = 70; // old car //
	param_capacities_2 = 85; // 16m car //
	param_capacities_3 = 105; // normal car //
	param_capacities_4 = 50; // express car //
}

if (param_capacities == 3) {
	param_capacities_1 = 80; // old car //
	param_capacities_2 = 100; // 16m car //
	param_capacities_3 = 120; // normal car //
	param_capacities_4 = 60; // express car //
}

if (param_capacities == 0) {
	param_loading_1D = 5; // 1 door //
	param_loading_2D = 10; // 2 doors //
	param_loading_3D = 20; // 3 doors //
	param_loading_4D = 40; // 4 doors //
	param_loading_5D = 55; // 5 doors //
}

if (param_capacities == 1) {
	param_loading_1D = 10; // 1 door //
	param_loading_2D = 20; // 2 doors //
	param_loading_3D = 30; // 3 doors //
	param_loading_4D = 50; // 4 doors //
	param_loading_5D = 65; // 5 doors //
}

if (param_capacities == 2) {
	param_loading_1D = 20; // 1 door //
	param_loading_2D = 30; // 2 doors //
	param_loading_3D = 40; // 3 doors //
	param_loading_4D = 60; // 4 doors //
	param_loading_5D = 75; // 5 doors //
}

if (param_capacities == 3) {
	param_loading_1D = 30; // 1 door //
	param_loading_2D = 40; // 2 doors //
	param_loading_3D = 50; // 3 doors //
	param_loading_4D = 80; // 4 doors //
	param_loading_5D = 95; // 5 doors //
}

if (param_buy == 0) { PURCHASE_COST_MOD = -1; }
if (param_buy == 1) { PURCHASE_COST_MOD = 0; }
if (param_buy == 2) { PURCHASE_COST_MOD = 1; }

if (param_run == 0) { RUNNING_COST_MOD = 2; }
if (param_run == 1) { RUNNING_COST_MOD = 3; }
if (param_run == 2) { RUNNING_COST_MOD = 4; }

basecost {
	PR_BUILD_VEHICLE_TRAIN: param_buy-2;
	PR_BUILD_VEHICLE_WAGON: param_buy +3;
	PR_RUNNING_TRAIN_ELECTRIC: param_run;
}

railtypetable {
    TR_1067: [NABE, ELRL],
	TR_1435_M: [SAB3, "3RDR", ELRL],
	TR_1435: [ELRL],
	TR_1372: [ELRL, NABE],
	TR_1435_LNR: [ELRL],
	TR_EVERY: [ELRL,NABE,SAB3,"3RDR"]
}


switch (FEAT_TRAINS, SELF, sw_length_2_8_2, position_in_articulated_veh % 3) {
        1: return 7;
        return 1;
    }
switch (FEAT_TRAINS, SELF, sw_length_1_6_1, position_in_articulated_veh % 3) {
		1: return 6;
        return 1;
    }
switch (FEAT_TRAINS, SELF, sw_length_1_1_8_2, position_in_articulated_veh % 4) {
        2: return 5;
		3: return 2;
        return 1;
    }	

if (param_capacities == 0) {
	param_capacity_mod = -60;
}
if (param_capacities == 1) {
	param_capacity_mod = -30;
}
if (param_capacities == 2) {
	param_capacity_mod = 0;
}

train_width_32_px = 1;
traininfo_y_offset = 2;


template tmpl_std(x,y) {
    // parameters x, y: coordinates of top-left corner of front sprite
    [x, 	 y,	8, 	24,		-3, 	-16] //short
	[x +9, 	 y,	22,	20,		-13,	-13] //dia1
	[x +32,  y,	32,	17,		-10,	-13] //long
	[x +65,  y,	22,	20,		-5, 	-12] //dia2
	[x +88,  y,	8, 	24,		-3, 	-16] //short
	[x +97,  y,	22,	20,		-13,	-13] //dia1
	[x +120, y,	32,	17,		-14,	-13] //long
	[x+153,  y,	22,	20,		-5, 	-12] //dia2
}

template tmpl_std_rev(x,y){
[x +88,  y,	8, 	24,		-3, 	-16] //short
[x +97,  y,	22,	20,		-13,	-13] //dia1
[x +120, y,	32,	17,		-10,	-13] //long
[x+153,  y,	22,	20,		-5, 	-12] //dia2
[x, 	 y,	8, 	24,		-3, 	-16] //short
[x +9, 	 y,	22,	20,		-13,	-13] //dia1
[x +32,  y,	32,	17,		-14,	-13] //long
[x +65,  y,	22,	20,		-5, 	-12] //dia2
}
template tmpl_std_20m(x,y) {
    // parameters x, y: coordinates of top-left corner of front sprite
    [x, 	 y,	8, 	26,		-3, 	-17] //short
	[x +9, 	 y,	24,	20,		-13,	-13] //dia1
	[x +34,  y,	36,	17,		-12,	-13] //long
	[x +71,  y,	24,	20,		-6, 	-11] //dia2
	[x +96,  y,	8, 	26,		-3, 	-17] //short
	[x +105,  y,	24,	20,		-13,	-13] //dia1
	[x +130, y,	36,	17,		-12,	-13] //long
	[x+167,  y,	24,	20,		-6, 	-11] //dia2
}
template tmpl_std_20m_rev(x,y) {
    // parameters x, y: coordinates of top-left corner of front sprite
    [x+96, 	 y,	8, 	26,		-3, 	-17] //short
	[x +105, 	 y,	24,	20,		-13,	-13] //dia1
	[x +130,  y,	36,	17,		-12,	-13] //long
	[x +167,  y,	24,	20,		-6, 	-11] //dia2
	[x,  y,	8, 	26,		-3, 	-17] //short
	[x +9,  y,	24,	20,		-13,	-13] //dia1
	[x +34, y,	36,	17,		-12,	-13] //long
	[x+71,  y,	24,	20,		-6, 	-11] //dia2
}
template tmpl_purchase (x, y) {
		[x , y, 88, 15, -30, -8]
}
disable_item(FEAT_TRAINS);
spriteset (dummy_sprites, "gfx/empty.png")
{
  [0, 0, 2, 2, 0, 0, CROP]
}
spriteset (set_mu_car_purchase,   "gfx/mucarbuy.png") { tmpl_purchase(0, 0) }
spriteset (set_mu_car_base,   "gfx/mucar.png") { tmpl_std(0, 0) }
switch (FEAT_TRAINS, SELF, sw_mucar_graphics, position_in_articulated_veh) {				
		1:  set_mu_car_base; 				
		dummy_sprites;
	}


switch(FEAT_TRAINS, SELF, sw_mucar_full_articulated_part, extra_callback_info1) {
	1: return mu_car;
    2: return mu_car;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

item(FEAT_TRAINS, mu_car) {
	property {
        name:  string(MUCAR);
        introduction_date: date(1800,1,1);
        climates_available: ALL_CLIMATES;
                model_life: VEHICLE_NEVER_EXPIRES;
                vehicle_life: 60;
                loading_speed: 0;
                cost_factor: 64;
                running_cost_factor: 6;
                speed: 0 km/h;
                power: 0 hp;
                cargo_capacity: 1;
                weight: 0 ton;
                tractive_effort_coefficient: 0.3;
                air_drag_coefficient: 0;
                reliability_decay: 20;
                refittable_cargo_classes: bitmask(CC_PASSENGERS);
                cargo_age_period: 185;
                refit_cost: 0;
                track_type: TR_EVERY;
                ai_special_flag: AI_FLAG_PASSENGER;
                running_cost_base: RUNNING_COST_DIESEL;
                engine_class: ENGINE_CLASS_STEAM;
                visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
                sprite_id: SPRITE_ID_NEW_TRAIN;
                dual_headed: 0;
                extra_power_per_wagon: 0;
                bitmask_vehicle_info: 0;
}
 graphics {
		purchase:                     set_mu_car_purchase;
    	additional_text:			        return string(MUCAR_DESC);
		articulated_part: sw_mucar_full_articulated_part;
    	default: sw_mucar_graphics;
		length: sw_length_1_6_1;
    }

}
switch(FEAT_TRAINS, SELF, sw_mucar_articulated_part, extra_callback_info1) {
	1: return mu_car;
    2: return mu_car;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, sw_stop_start_2, num_vehs_in_consist < 6) {				
		1:  return string(STR_FEW_CARS_2_ERROR); 				
		return CB_RESULT_NO_TEXT; 
	}
switch (FEAT_TRAINS, SELF, sw_stop_start_3, num_vehs_in_consist < 9) {				
		1:  return string(STR_FEW_CARS_3_ERROR); 				
		return CB_RESULT_NO_TEXT; 
	}
switch (FEAT_TRAINS, SELF, sw_stop_start_4, num_vehs_in_consist < 12) {				
		1:  return string(STR_FEW_CARS_4_ERROR); 				
		return CB_RESULT_NO_TEXT; 
	}

//ginza
#include "src/Tokyo/ginza/tk_gz_type1000.pnml"
#include "src/Tokyo/ginza/tk_gz_type1100.pnml"
#include "src/Tokyo/ginza/tk_gz_type100.pnml"
#include "src/Tokyo/ginza/tk_gz_type1300.pnml"
#include "src/Tokyo/ginza/tk_gz_type1900.pnml"
#include "src/Tokyo/ginza/tk_gz_01series.pnml"
#include "src/Tokyo/ginza/tk_gz_1000series.pnml"

//marunouchi
#include "src/Tokyo/marunouchi/type1900.pnml"
#include "src/Tokyo/marunouchi/eidan500.pnml"
#include "src/Tokyo/marunouchi/eidan02.pnml"
#include "src/Tokyo/marunouchi/2000series.pnml"

//hibiya
#include "src/Tokyo/hibiya/eidan3000.pnml"
#include "src/Tokyo/hibiya/eidan03.pnml"
//#include "src/Tokyo/hibiya/tk_hb_13000series.pnml"
//tozai
//#include "src/Tokyo/tozai/tk_tz_5000series.pnml"
//#include "src/Tokyo/tozai/tk_tz_05series.pnml"
//#include "src/Tokyo/tozai/tk_tz_07series.pnml"
//#include "src/Tokyo/tozai/tk_tz_15000series.pnml"
//#include "src/Tokyo/tozai/tk_tz_toyo1000.pnml"
//#include "src/Tokyo/tozai/tk_tz_toyo2000.pnml"
////chiyoda
//#include "src/Tokyo/chiyoda/tk_ch_5000series.pnml"
//#include "src/Tokyo/chiyoda/tk_ch_6000series.pnml"
//#include "src/Tokyo/chiyoda/tk_ch_06series.pnml"
//#include "src/Tokyo/chiyoda/tk_ch_16000series.pnml"
////chiyoda kita-ayase-branch
//#include "src/Tokyo/chiyoda/tk_ch_5000series_br.pnml"
//#include "src/Tokyo/chiyoda/tk_ch_6000series_br.pnml"
//#include "src/Tokyo/chiyoda/tk_ch_05series.pnml"
//// futokushin-yurakucho
//#include "src/Tokyo/yurakucho_fukutoshin/tk_yk_07series.pnml"
//#include "src/Tokyo/yurakucho_fukutoshin/tk_yk_7000series.pnml"
//#include "src/Tokyo/yurakucho_fukutoshin/tk_yk_10000series.pnml"
//#include "src/Tokyo/yurakucho_fukutoshin/tk_yk_17000series.pnml"
////hanzomon
//#include "src/Tokyo/hanzomon/8000series.pnml"
//#include "src/Tokyo/hanzomon/08series.pnml"
//#include "src/Tokyo/hanzomon/18000series.pnml"
////namboku
//#include "src/Tokyo/namboku/9000series.pnml"
//#include "src/Tokyo/namboku/saitama2000.pnml"
////asakusa
////5000
////5200
////5300
//#include "src/Tokyo/asakusa/toei5500.pnml"
////mita
//#include "src/Tokyo/mita/toei6000.pnml"
//#include "src/Tokyo/mita/toei6300.pnml"
//#include "src/Tokyo/mita/toei6500.pnml"
////shinjuku
//#include "src/Tokyo/shinjuku/toei10_000.pnml"
//#include "src/Tokyo/shinjuku/toei10_300.pnml"
//
//#include "src/Tokyo/oedo/toei12_000.pnml"
//
